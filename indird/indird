#!/usr/bin/env bash-static
#
#	indird - Watch a directory for incoming files
#
#	requires package jq
#
Prg=$(basename $0)
IndPfx="$(tr '[a-z]' '[A-Z]' <<< "$Prg")_"		# Derive prefix from $Prg
eval "Config=\${${IndPfx}CONFIG:-/etc/\$Prg.conf}"	# Derive default file from $Prg
LogFile=/var/log/$Prg.log
RunDir=/run/$Prg
TmpDir=/tmp

StampFmt='%Y-%m-%d %H:%M:%S'	# Date format for logs
MinSleep=5			# Minimum value of the 'sleep' parameter

# Fail exit codes
ExUsage=1
ExSyntax=2
ExNotRoot=3
ExCfgErr=4
ExNotHost=5
ExNoPath=6

tty >/dev/null && isTty=y
test $(id -u) -eq 0 && isRoot=y
test -z "$isTty" -a "$isRoot" && exec 2>>$LogFile

#
#------ Functions ------------------------------------------------------
#
Stamp()
{
    # global StampFmt

    date "+$StampFmt $1"
}

# params <message> <logger-level>
LogMsg()
{
    # global isTty Logfile
    if [ "$isTty" ]; then
	echo "$1" >&2
	return
    fi
    Stamp "[$Tag] $1" >>$LogFile
    # Should we use 'user' facility instead of 'daemon' ?
    test "$2" && logger -p daemon.$2 "$1"
}

# params none
Usage()
{
    # global ExUsage
    LogMsg "Usage: $0 <dir-tag> [ wakeup | config | check | nlcheck ]" 'crit'
    exit $ExUsage
}

# params <message> <exit-code>
LogExit()
{
    # global Prg
    LogMsg "$Prg: $1" 'err'
    exit $2
}

# params <message> [ <exit-code> ]
ConfErr()
{
    # global Config Tag ExCfgErr
    local xc

    #	If an exit code is specified, the error is about a value
    #	external to the config itself ('host', 'path' or 'shell')
    if [ "$2" ]; then
	# if we are in non-local check mode, just return
	test "$ChkMode" = 'nlcheck' && return
	xc=$2
    else
	xc=$ExCfgErr
    fi
    LogExit "in $Config for $Tag, $1" $xc
}

# params <message>
LogWarn()
{
    LogMsg "$1" 'warning'
}

# params <message>
LogNote()
{
    LogMsg "$1" 'notice'
}

# params <message>
LogInfo()
{
    LogMsg "$1" 'info'
}

# params <message>
LogDbg()
{
    test "${Conf['debug']}" = 'true' && LogMsg "$1" # 'debug'
}

#
#   Read configuration file for our instance (<tag>)
#
# params <config-file> <tag>
GetConf()
{
    # global Conf Prg Host
    local cnf err line tags

    err=$(mktemp)
    # Be really defensive (as we shall also need mktemp later)
    test -f "$err" || LogExit "cannot create temp file $err ??" $ExCfgErr

    # Full-line # comments are allowed, \n changed to ;
    if cnf=$(sed -e '/^[ 	]*#/d' -e 's/\\n/; /g' $1 | jq -c -e ".$2" 2>$err); then
	ParseConf "$cnf"
	rm $err
    else
	if [ -s "$err" ]; then
	    LogMsg "$Prg: $1 has errors:"
	    while read line
	    do
		LogMsg "    $line"
	    done <$err
	    rm $err
	    exit $ExCfgErr
	fi
        rm $err
	# if tag unknown, list known tags
	tags=$(sed '/^[ 	]*#/d' $1 | jq -r 'keys|join(" ")')
	LogExit "\"$2\" tag unknown in $1; known tags: $tags" $ExCfgErr
    fi
    Host=$(hostname)	# Create/update global with latest value
}

#
#   Recursively parse JSON config data into Conf bash array
#
# params <JSON-obj> [ <obj-path> ]
ParseConf()
{
    # global Conf
    local JSON Path Key Val

    JSON=$(jq -r 'to_entries|.[]|(.key|tostring)+" "+(.value|tostring)' <<< "$1")
    test "$2" && Path="$2."

    while read -r Key Val
    do
        if jq -e '.|iterables' >/dev/null 2>&1 <<< "$Val"; then
	    test "$Path$Key" = 'macros' && continue	# Skip this yaml kludge
            Conf["$Path$Key._keys"]=$(jq -r 'keys|map(tostring)|join(" ")' <<< "$Val")
            ParseConf "$Val" "$Path$Key"
        else
            Conf["$Path$Key"]="$Val"
        fi
    done <<< "$JSON"
}

#
#   Check configuration
#
# params <rundir>
ChkConf()
{
    # global Conf ChkMode Tag Prg Shell EnvPfx CmdEnv
    local key val prop idx jdx step sub path link sfx

    # Check for required config parameters
    for key in 'path' 'sleep'
    do
	test -v Conf["$key"] || ConfErr "required '$key' property is missing"
    done
    # Make sure that ${Conf['path']} exists
    test -d "${Conf['path']}" -o "$ChkMode" = 'nlcheck' || ConfErr "path \"${Conf['path']}\" does not exist" $ExNoPath
    # Make sure that ${Conf['sleep']} is numeric
    val="${Conf['sleep']}"
    test "$(expr "$val" : '\([0-9]*\)')" = "$val" || ConfErr "required 'sleep' property must be numeric, not \"$val\""
    test "$val" -ge $MinSleep || ConfErr "required 'sleep' property must be at least ${MinSleep}s, not ${val}s"

    # Check optional config parameters
    #   hostname: if param exists, it must have value $Host
    if [ -v Conf['host'] -a "$ChkMode" != 'nlcheck' ]; then
	val="${Conf['host']}"
	test "$Host" = "$val" || ConfErr "host \"$val\" does not match system's \"$Host\"" $ExNotHost
    fi

    #	shell: if param exists it must be known from 'command -v'
    if [ -v Conf['shell'] -a "$ChkMode" != 'nlcheck' ]; then
	val=$(command -v "${Conf['shell']}") && Shell="$val" || ConfErr "shell \"${Conf['shell']}\" is not valid" $ExNoPath
    fi

    #	debug: if param exists, it must have value 'true'
    if [ -v Conf['debug'] ]; then
	val="${Conf['debug']}"
	test "$val" = 'true' -o "$val" = 'false' || ConfErr "debug parameter has value \"$val\", not 'true' or 'false'"
    fi

    # Check for required dicts
    for key in 'filetypes' 'actions' 'rules'
    do
	test -v Conf["$key._keys"] || ConfErr "required '$key' dict is missing or empty"
    done

    # Check filetypes dict
    for key in ${Conf['filetypes._keys']}
    do
	# all members are mandatory
	for prop in 'desc' 'method' 'pattern'
	do
	    test -v Conf["filetypes.$key.$prop"] || ConfErr "filetypes.$key has no '$prop' property"
	done
	# method has fixed values
	val="${Conf["filetypes.$key.method"]}"
	test "$val" = 'fileglob' -o "$val" = 'regexp' || ConfErr "filetypes.$key.method has invalid value \"$val\""
    done

    # Check actions dict
    for key in ${Conf['actions._keys']}
    do
	# at least cmd is required, all others optional
	test -v Conf["actions.$key.cmd"] || ConfErr "actions.$key has no 'cmd' property"
	# check that optionnal chdir's directory exists
	if [ -v Conf["actions.$key.chdir"] ]; then
	    val="${Conf["actions.$key.chdir"]}"
	    test -d "$val" -o "$val" = 'null' || ConfErr "actions.$key.chdir directory \"$val\" does not exist"
	fi
    done

    # Check optional ends dict
    for key in ${Conf['ends._keys']}
    do
	# at least cmd is required, all others optional
	test -v Conf["ends.$key.cmd"] || ConfErr "ends.$key has no 'cmd' property"
	# check that optionnal chdir's directory exists
	if [ -v Conf["ends.$key.chdir"] ]; then
	    val="${Conf["ends.$key.chdir"]}"
	    test -d "$val" -o "$val" = 'null' || ConfErr "ends.$key.chdir directory \"$val\" does not exist"
	fi
	# optional stdin has fixed values
	if [ -v Conf["ends.$key.stdin"] ]; then
	    val="${Conf["ends.$key.stdin"]}"
	    test "$val" = 'out' -o "$val" = 'err' -o "$val" = 'all' || ConfErr "ends.$key.stdin has invalid value \"$val\""
	fi
    done

    # Check optional logs dict
    for key in ${Conf['logs._keys']}
    do
	# at least type is required, others may vary
	test -v Conf["logs.$key.type"] || ConfErr "logs.$key has no 'type' property"
	val="${Conf["logs.$key.type"]}"
	if [ "$val" = 'file' ]; then
	    # check for args
	    test -v Conf["logs.$key.args._keys"] || ConfErr "logs.$key has no 'args' property"
	    # check for args.path
	    test -v Conf["logs.$key.args.path"] || ConfErr "logs.$key has no 'path' property in 'args'"
	elif [ "$val" = 'syslog' ]; then
	    # check for args
	    test -v Conf["logs.$key.args._keys"] || ConfErr "logs.$key has no 'args' property"
	    # check args.facility
	    test -v Conf["logs.$key.args.facility"] || ConfErr "logs.$key has no 'facility' property in 'args'"
	    val="${Conf["logs.$key.args.facility"]}"
	    test "$val" = 'user' -o "$val" = 'daemon' || ConfErr "logs.$key.facility has invalid value \"$val\""
	    # check args.level
	    test -v Conf["logs.$key.args.level"] || ConfErr "logs.$key has no 'level' property in 'args'"
	    val="${Conf["logs.$key.args.level"]}"
	    # check .level for valid logger levels
	    #	panic	is a deprecated synonym for emerg
	    #	error   is a deprecated synonym for err
	    #	warn	is a deprecated synonym for warning
	    for prop in emerg alert crit err warning notice info debug panic error warn
	    do
		test "$val" = "$prop" && { val=; break; }
	    done
	    test "$val" && ConfErr "logs.$key.args.level has invalid value \"$val\""
	else
	    ConfErr "logs.$key.type has invalid value \"$val\""
	fi
    done

    # Check top-level rules dict
    for key in ${Conf['rules._keys']}
    do
	# rule members must match filetypes (dict)
	test -v Conf["filetypes.$key.desc"] || ConfErr "rules.$key does not match any 'filetypes' member"
	# each rule member/filetype has steps
	for idx in ${Conf["rules.$key._keys"]}
	do
	    step="rules.$key.$idx"
	    # each step must have at least an action
	    test -v Conf["$step.action"] || ConfErr "$step has no 'action' property"
	    # action value must match a member of actions (dict)
	    val="${Conf["$step.action"]}"
	    test -v Conf["actions.$val.cmd"] || ConfErr "$step.action \"$val\" does not match any 'actions' member"
	    if [ -v Conf["$step.hide"] ]; then
		val="${Conf["$step.hide"]}"
		test "$val" = 'true' -o "$val" = 'false' || ConfErr "$step.hide has value \"$val\", not 'true' or 'false'"
	    fi

	    # a step may have a list of ends
	    for jdx in ${Conf["$step.ends._keys"]}
	    do
		sub="$step.ends.$jdx"
		# each end must have a cond and an end (name)
		for prop in 'cond' 'end'
		do
		    test -v Conf["$sub.$prop"] || ConfErr "$sub has no '$prop' property"
		done
		# cond must match a member of conds (dict)
		val="${Conf["$sub.cond"]}"
		test -v Conf["conds.$val"] || ConfErr "$sub.cond \"$val\" does not match any 'conds' member"
		# end must match a member of ends (dict)
		val="${Conf["$sub.end"]}"
		test -v Conf["ends.$val.cmd"] || ConfErr "$sub.end \"$val\" does not match any 'ends' member"
	    done

	    # a step may also have a list of logs
	    for jdx in ${Conf["$step.logs._keys"]}
	    do
		sub="$step.logs.$jdx"
		# each log must match a member of logs (dict)
		val="${Conf["$sub"]}"
		test -v Conf["logs.$val.type"] || ConfErr "$sub \"$val\" does not match any 'logs' member"
	    done
	done
    done
    test "$ChkMode" = 'nlcheck' && return	# If non-local, we are done

    # Make sure our .path has its dir
    mkdir -p $1		# make our rundir if necessary
    path="$1/${Tag}_path"
    if [ -e "$path" -o -L "$path" ]; then
	if [ -L "$path" ]; then	# $path is a symbolic link (orphan or not)
	    link=$(readlink "$path")
	    #echo "path='$path' link='$link' conf='${Conf['path']}'"
	    if [ "$link" != "${Conf['path']}" ]; then
		if [ "$isRoot" ]; then
		    LogNote "removing previous '$path' link to '$link'"
		    rm -f "$path"
		else
		    LogMsg "$Prg: NOTE: $path points to $link, not ${Conf['path']}!"
		fi
	    fi
	else	# $path exists but is not a symbolic link
	    test -d "$path" && ConfErr "path $path must be a symbolic link, not a directory" $ExNoPath
	    if [ "$isRoot" ]; then
		LogNote "removing spurious file '$path'"
		rm -f "$path"
	    else
		LogMsg "$Prg: NOTE: $path exists and is not a symbolic link"
	    fi
	fi
    fi
    test -e "$path" || { test "$isRoot" && ln -s "${Conf['path']}" "$path"; }

    # Build environment
    EnvPfx="${Conf['env_prefix']:-$IndPfx}"
    for sfx in ${Conf['env._keys']}	# May not exist
    do
	CmdEnv="$CmdEnv$EnvPfx$sfx=\"${Conf["env.$sfx"]}\" "
    done
    CmdEnv="$CmdEnv${EnvPfx}HOST=\"$Host\" "
    CmdEnv="$CmdEnv${EnvPfx}CONF=\"$Tag\" "
    CmdEnv="$CmdEnv${EnvPfx}PATH=\"${Conf['path']}\" "
}

#
#   Wakeup main process by killing its sleep command (if running)
#
# params <instance>
WakeupMain()
{
    local MainPID pid

    eval $(systemctl -p MainPID show $1)
    if [ 0$MainPID -gt 0 ]; then
	# ps -ef columns: 1:UID 2:PID 3:PPID 4:C 5:STIME 6:TTY 7:TIME 8:CMD 9:ARG
	pid=$(ps -ef | awk "\$3==$MainPID && \$8==\"sleep\" && \$9!=\"$wDelay\" {print \$2}")
	if [ "$pid" ]; then
	    LogDbg "Waking up $1 (Main PID=$MainPID, sleep PID=$pid)"
	    kill $pid
	else
	    LogDbg "No need to wakeup $1 (Main PID=$MainPID), already active"
	fi
    else
	LogWarn "Instance $1 is not running ?"
    fi
}

#
#   Output all JSON paths declared in the config file
#   (NOTE that these 'paths' are conceptually unrelated to ${Conf['path']})
#
ConfigPaths()
{
    # global Conf
    local key

    for key in "${!Conf[@]}"
    do
	echo "$key=\"${Conf[$key]}\""
    done | sort
}

GotSig()
{
    # global Signal SleepPID
    local SIG

    SIG=$(tr '[a-z]' '[A-Z]' <<<$1)
    LogNote "Received SIG$SIG"
    Signal=$1
    #	sleep was probably killed by our sig, but kill $SleepPID as a precaution
    test "$SleepPID" && kill "$SleepPID" 2>/dev/null
}

SigHup()
{
    GotSig Hup
}

SigTerm()
{
    GotSig Term
}

SigUsr1()
{
    GotSig Usr1
}

SigUsr2()
{
    GotSig Usr2
}

#
#------ Startup --------------------------------------------------------
#
#   We need a tag as our first argument
#   so we can load and check our config
#
test "$1" || Usage
command -v jq >/dev/null || LogExit "cannot find the jq JSON processor" $ExUsage
command -v lsof >/dev/null || LogExit "cannot find the lsof utility" $ExUsage

Tag=$1
declare -A Conf
GetConf $Config $Tag	# Check that $Tag exists, load config and set Host var
#
#   Handle config utility: output config paths without checks
#
if [ "$2" = 'config' ]; then
    test "$isTty" || LogExit "'$2' command is for command-line only" $ExSyntax
    ConfigPaths
    exit 0
fi

test "$2" = 'check' -o "$2" = 'nlcheck' && ChkMode=$2

# These global variables will be updated by ChkConf
Shell='sh'
EnvPfx=
CmdEnv=

ChkConf $RunDir
#echo "CmdEnv=[$CmdEnv]"; exit 0

#
#   Handle check / nlcheck utilities: just exit now, display msg if tty
#
if [ "$2" = 'check' -o "$2" = 'nlcheck' ]; then
    test "$isTty" && echo "Config $Config for $Tag OK"
    exit 0
fi
test -z "$2" -o "$2" = 'wakeup' || Usage	# Reject unknown 2nd arg

#   Ensure we are now root
test "$isRoot" || LogExit "must be run as root" $ExNotRoot

#
#   Handle wakeup calls from our associated .path
#
if [ "$2" ]; then
    WakeupMain "$Prg@$Tag"
    exit 0
fi
#
#   Trap signals and notify systemd we are done with our init
#
wDelay='0.2'
Signal=
SleepPID=
trap SigHup   HUP
trap SigTerm TERM
trap SigUsr1 USR1
trap SigUsr2 USR2
LogNote "Starting $Prg on ${Conf['path']} ================"
LogInfo "Watch interval is ${Conf['sleep']}s"
test -v Conf['shell'] && LogInfo "Commands will be processed with '$Shell'"
cd "${Conf['path']}"
systemd-notify --pid=$$ --ready	# Notify the end of our startup phase

# FindWriter outputs the command (if any) currently writing to file $1
FindWriter()
{
    local fm cmd mode

    # lsof columns: 1:COMMAND 2:PID 3:USER 4:FD 5:TYPE 6:DEVICE 7:SIZE 8:NODE 9:NAME
    #	We put cmd last just in (the very unlikely) case it would contain spaces.
    lsof "$1" | awk '$1 != "COMMAND"{print $4,$7,$1}' | while read fm sz cmd
    do
	# Extract mode from file-descriptor+mode
	mode=$(expr "$fm" : '[0-9][0-9]*\(.*\)')
	LogDbg "  File '$1' mode='$mode' size=$sz cmd='$cmd'"
	test "$mode" = 'w' && echo "$cmd" && break
    done
}

# StepLogs is here as a function to be called more than once
# within the main loop if ever needed in a future version
#
#   params <key> <env> <msg>
StepLogs()
{
    # global Conf Shell
    local idx log logfile

    test "$3" || { LogDbg "not enough StepLogs args"; return; }
    for idx in ${Conf["$1._keys"]}
    do
	log="logs.${Conf["$1.$idx"]}"
	LogDbg "      logging on $log"
	if [ "${Conf["$log.type"]}" = 'file' ]; then
	    logfile=$($Shell -c "$2; echo \"${Conf["$log.args.path"]}\"")
	    Stamp "$3" >>"$logfile"
	elif [ "${Conf["$log.type"]}" = 'syslog' ]; then
	    logger -p "${Conf["$log.args.facility"]}.${Conf["$log.args.level"]}" "$3"
	fi
    done
}

#   Output $1 file's mtime in ms
mTime()
{
    set -- $(ls -ld --time-style='+%s %N' "$1");
    echo $6$(expr "$7" : '\(...\)')
}

#   Output $1 in milliseconds as YYYY-mm-dd HH:MM:SS.NNN
hTime()
{
    local sec ms

    test "$1" = '0' && { echo '(never)'; return; }
    sec=$(expr "$1" : '\(.*\)...$')
    ms=$(expr "$1" : '.*\(...\)$')
    date -d "@$sec" "+%Y-%m-%d %H:%M:%S.$ms"
}

#
#------ Main loop ------------------------------------------------------
#
LastMod=0
trace=
#   Loop until SIGTERM {
while :
do
    #	Handle signals synchronously
    if [ "$Signal" = 'Hup' ]; then
	LogNote "Re-opening $LogFile on SIGHUP"
	exec 2>>&-
	exec 2>>$LogFile
	Signal=
    elif [ "$Signal" = 'Term' ]; then
	LogNote "Exiting on SIGTERM"
	break
    elif [ "$Signal" = 'Usr1' ]; then
	LogNote "Reloading $Config on SIGUSR1"

	# Reset Conf
	unset Conf
	declare -A Conf

	# Then re-read and re-check the config
	GetConf $Config $Tag
	ChkConf $RunDir

	Signal=
    elif [ "$Signal" = 'Usr2' ]; then
	LogNote "Change x mode SIGUSR2"
	if [ "$trace" ]; then
	    trace=
	    set +x
	else
	    trace=y
	    set -x
	fi
	Signal=
    fi

    # wakeup from sleep (end or kill) and save last mtime of spool dir as $Mod
    # while dir touched since last loop
    #   loop on filetypes (rules members)
    #	  loop on matching files
    #	    loop on rule's steps
    #	      run action of step
    #	      loop on ends of step (using cond)
    #	      loop on logs of step
    #	      if action failed, abort step loop
    #
    # Make sure with '/' below that we dereference a possible symlink
    Mod=$(mTime "${Conf['path']}/")
    if ! expr "$Mod" : '[0-9][0-9]*$' >/dev/null; then
	LogDbg "WARNING: Mod='$Mod' !!"
	Mod=$LastMod
    fi
    if [ $Mod -eq $LastMod ]; then
	LogDbg "Mod = LastMod='$(hTime "$Mod")'"
    elif [ $Mod -gt $LastMod ]; then
	LogDbg "Mod='$(hTime "$Mod") > LastMod='$(hTime "$LastMod")'"
    else
	LogDbg "WARNING: Mod='$(hTime "$Mod") < LastMod='$(hTime "$LastMod")'"
    fi
    #   Loop until dir untouched {
    while [ $Mod -gt $LastMod ]
    do
	NbP=0	# number of files processed
	NbS=0	# number of files with at least one success action
	NbW=0	# number of files being written to
	LastMod=$Mod
	LogDbg "Examining "${Conf['path']}"..."

	#   Loop on all 'rules' members (filetypes) {
	for ft in ${Conf['rules._keys']}
	do
	    LogInfo "Checking ${Conf["filetypes.$ft.desc"]}"
	    pat="${Conf["filetypes.$ft.pattern"]}"

	    if [ "${Conf["filetypes.$ft.method"]}" = 'fileglob' ]; then
		Files="$pat"
		met='fglob'
	    else	# regexp
		Files=$(ls | grep "$pat")
		met='regex'
	    fi

	    #   Loop on matching files {
	    LogDbg "ft='$ft' pat=\"$pat\"' met=$met Files=\"$Files"\"
	    for file in $Files
	    do
		test -f "$file" || continue	# Handle no match

		# Check that file is not being written to
		Writer="$(FindWriter "$file")"
		if [ "$Writer" ]; then
		    LogDbg "  File $file is being written to by $Writer - skipping"
		    NbW=$((NbW + 1))
		    continue
		fi

		LogDbg "  Processing $file"
		# base Env for all steps
		FileEnv="$CmdEnv${EnvPfx}RULE=\"$ft\""
		FileEnv="$FileEnv ${EnvPfx}FILE=\"$file\""

		#   Loop on rule's steps {
		Succ=
		for idx in ${Conf["rules.$ft._keys"]}
		do
		    step="rules.$ft.$idx"
		    if [ "${Conf["$step.hide"]}" = 'true' ]; then
			LogDbg "    Discarding hidden $step"
			continue
		    fi
		    test -v Conf["$step.desc"] && LogDbg "    Step $idx: ${Conf["$step.desc"]}"

		    #
		    #   Run our step's action, saving stdout/stderr and exit code
		    #
		    act="actions.${Conf["$step.action"]}"
		    ThisEnv="$FileEnv"

		    # Optional action's chdir
		    ChDir=
		    test -v Conf["$act.chdir"] -a "${Conf["$act.chdir"]}" != 'null' && ChDir=" cd ${Conf["$act.chdir"]};"

		    # Optional action's env
		    for sfx in ${Conf["$act.env._keys"]}	# May not exist
		    do
			ThisEnv="$ThisEnv $EnvPfx$sfx=\"${Conf["$act.env.$sfx"]}\""
		    done

		    #	Determine our step's possible StdIns
		    StdIns=
		    for jdx in ${Conf["$step.ends._keys"]}
		    do
			end="ends.${Conf["$step.ends.$jdx.end"]}"
			if [ -v Conf["$end.stdin"] ]; then
			    val="${Conf["$end.stdin"]}"
			    test "$StdIns" && StdIns="$StdIns "
			    StdIns="$StdIns$val"
			fi
		    done
		    if [ "$StdIns" ]; then
			# Normalize $StdIns to one of these values
			#	out		(split)
			#	err		(split)
			#	all		(merge)
			#	out err		(split)
			#	out all		(combo)
			#	err all		(combo)
			#	out err all	(combo)
			StdIns=`echo "$StdIns" | tr ' ' '\n' | sort -ru`
			StdIns=`echo -n "$StdIns" | tr '\n' ' '`
		    fi

		    # Go !
		    LogDbg "      running act=\"$act\""
		    LogDbg "        cmd: >>$ThisEnv;$ChDir ${Conf["$act.cmd"]}<<"
		    TmpOut=
		    TmpErr=
		    TmpAll=
		    beg=$(date '+%s')
		    # Optimize temp file usage in our .cmd call
		    if [ -z "$StdIns" -o "$StdIns" = 'all' ]; then
			# Only 'all' (merge)
			test "$StdIns" && TmpAll=$(mktemp $TmpDir/$Prg-XXXXXXXX.all) || TmpAll=/dev/null
			LogDbg "          using $TmpAll"
			$Shell -c "$ThisEnv;$ChDir ${Conf["$act.cmd"]}" >$TmpAll 2>&1
			xc=$?
		    elif [ "$StdIns" = 'out' -o "$StdIns" = 'err' -o "$StdIns" = 'out err' ]; then
			# No 'all' (split)
			grep out <<<"$StdIns" >/dev/null && TmpOut=$(mktemp $TmpDir/$Prg-XXXXXXXX.out) || TmpOut=/dev/null
			grep err <<<"$StdIns" >/dev/null && TmpErr=$(mktemp $TmpDir/$Prg-XXXXXXXX.err) || TmpOut=/dev/null
			LogDbg "          using $TmpOut and $TmpErr"
			$Shell -c "$ThisEnv;$ChDir ${Conf["$act.cmd"]}" >$TmpOut 2>$TmpErr
			xc=$?
		    else
			# Mix (combo): prepare Tmp files
			TmpAll=$(mktemp $TmpDir/$Prg-XXXXXXXX.all)
			grep out <<<"$StdIns" >/dev/null && TmpOut=$(mktemp $TmpDir/$Prg-XXXXXXXX.out)
			grep err <<<"$StdIns" >/dev/null && TmpErr=$(mktemp $TmpDir/$Prg-XXXXXXXX.err)
			# Different combo modes
			if [ "$StdIns" = 'out all' ]; then
			    LogDbg "          using $TmpOut and $TmpAll"
			    { { $Shell -c "$ThisEnv;$ChDir ${Conf["$act.cmd"]}" 2>&3; } | tee $TmpOut; } >$TmpAll 3>&1
			    xc=${PIPESTATUS[0]}		# THE exit code
			elif [ "$StdIns" = 'err all' ]; then
			    LogDbg "          using $TmpErr and $TmpAll"
			    { { $Shell -c "$ThisEnv;$ChDir ${Conf["$act.cmd"]}" 2>&1 1>&3; } | tee $TmpErr; } >$TmpAll 3>&1
			    xc=${PIPESTATUS[0]}		# THE exit code
			else
			    LogDbg "          using $TmpOut, $TmpErr and $TmpAll"
			    { { { $Shell -c "$ThisEnv;$ChDir ${Conf["$act.cmd"]}"; } | tee $TmpOut; exit ${PIPESTATUS[0]}; } 2>&1 1>&3 | tee $TmpErr; } >$TmpAll 3>&1	# Yes we can!
			    xc=${PIPESTATUS[0]}		# THE exit code
			fi
		    fi
		    # base Env for all ends
		    CondEnv="$FileEnv ${EnvPfx}CODE=$xc"
		    LogDbg "      after $(($(date '+%s') - beg))s CondEnv=\"$CondEnv\""

		    #
		    #	Run any step ends {
		    #
		    for jdx in ${Conf["$step.ends._keys"]}
		    do
			cond=${Conf["$step.ends.$jdx.cond"]}
			LogDbg "      end $jdx: check cond $cond"
			$Shell -c "$CondEnv; ${Conf["conds.$cond"]}" >/dev/null 2>&1 || continue

			end="ends.${Conf["$step.ends.$jdx.end"]}"
			ThisEnv="$CondEnv"

			# Optional end's chdir
			Chdir=
			test -v Conf["$end.chdir"] -a "${Conf["$end.chdir"]}" != 'null' && ChDir=" cd ${Conf["$end.chdir"]};"
			# Optional end's env
			for sfx in ${Conf["$end.env._keys"]}	# May not exist
			do
			    ThisEnv="$ThisEnv $EnvPfx$sfx=\"${Conf["$end.env.$sfx"]}\""
			done

			StdIn=/dev/null
			if [ -v Conf["$end.stdin"] ]; then
			    case "${Conf["$end.stdin"]}" in
				out)	StdIn=$TmpOut;;
				err)	StdIn=$TmpErr;;
				all)	StdIn=$TmpAll;;
			    esac
			fi
			LogDbg "        running end=\"$end\""
			LogDbg "          cmd: >>$ThisEnv;$ChDir ${Conf["$end.cmd"]}<<"
			Out=$($Shell -c "$ThisEnv;$ChDir ${Conf["$end.cmd"]}" <$StdIn 2>&1)
			rc=$?
			if [ $rc -ne 0 ]; then
			    Out=$(<<<"$Out" tr '\n' '~' | sed -e 's/~$//' -e 's/~/<LF>/g')
			    LogWarn "\"${Conf["$end.cmd"]}\" returned \"$Out\" (exit=$rc)"
			fi
		    done    # } Run any step ends

		    #   Now we can remove any Tmp files
		    for f in $TmpOut $TmpErr $TmpAll
		    do
			test -f "$f" && rm -f "$f"	# Do not destroy /dev/null !
		    done

		    #
		    #	Handle any step logs
		    #
		    test "$xc" -eq 0 && { Ret='success'; Succ=y; } || Ret="failure (exit=$xc)"
		    StepLogs "$step.logs" "$CondEnv" "$Tag $act for $file returned $Ret"

		    # If our action failed, abort steps loop
		    if [ "$xc" -ne 0 ]; then
			LogDbg "      aborting $step as xc=$xc"
			break
		    fi
		done #	} Loop on rule's steps

		# Count processed / succesful files
		NbP=$((NbP + 1))
		test "$Succ" && NbS=$((NbS + 1))
		LogDbg "NbS=$NbS NbP=$NbP"

		test "$Signal" && break
	    done #  } Loop on matching files
	    LogDbg "Done with $Files"

	    test "$Signal" && break
	done #	} Loop on all 'rules' members
	LogInfo "Processed $NbP file(s), $NbS successfully"
	LogDbg "NbW=$NbW"
	# If files being written to, Wait 200ms and touch ${Conf['path']}
	test $NbW -gt 0 && sleep $wDelay && touch "${Conf['path']}"

	# Make sure with '/' below that we dereference a possible symlink
	Mod=$(mTime "${Conf['path']}/")
	if ! expr "$Mod" : '[0-9][0-9]*$' >/dev/null; then
	    LogDbg "WARNING: Mod='$Mod' !!"
	    Mod=$LastMod
	fi

	test "$Signal" && break
    done #  } Loop until dir untouched

    if [ -z "$Signal" ]; then
	sleep "${Conf['sleep']}" <&- >&- 2>&- &
	SleepPID=$!
	LogDbg "Sleeping ${Conf['sleep']}s (PID=$SleepPID)"
	wait $SleepPID	# Trick to avoid stderr messages like Terminated
	rc=$?
	warn=''
	norm=' normally'
	if [ "$rc" -gt 128 ]; then
	    test "$Signal" && from='SigTerm' || from='WakeupMain'
	    rc=$((rc - 128))
	    test "$rc" -eq 15 || { warn='WARNING: '; norm=''; }
	    ret="was interrupted$norm by SIG$(kill -l $rc) from $from"
	else
	    test "$rc" -eq 0 || { warn='WARNING: '; norm=''; }
	    ret="returned$norm with exit-code=$rc"
	fi
	LogDbg "$warn'sleep' (PID=$SleepPID) $ret"
	SleepPID=
    else
	LogDbg "Signal=$Signal"
    fi
done	# } Loop until SIGTERM
LogInfo "Done"
exit 0
