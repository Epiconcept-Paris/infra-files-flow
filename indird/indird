#!/usr/bin/env bash
#
#	indird - Watch a directory for incoming files
#
#	requires package jq
#	Yaml to JSON conversion may use	https://github.com/drbild/json2yaml.git
#	    which uses packages python-yaml python-docopt
#
# TODO: syslog/log

Prg=`basename $0`
Config=/etc/$Prg.conf
LogFile=/var/log/$Prg.log
Stamp='%Y-%m-%d %H:%M:%S'
RunDir=/run

#
#------ Functions ------------------------------------------------------
#
# params <message>
LogMsg()
{
    # global Stamp Logfile
    date "+$Stamp $1" >>$LogFile
}

# params <message> <exit-code>
LogErr()
{
    # global Prg
    LogMsg "$Prg: $1"
    exit $2
}

Usage()
{
    LogMsg "Usage: $0 <dir-tag> [ wakeup ]"
    exit 1
}

#
#   Read configuration file for our instance (Tag)
#
# params <config-file> <tag> <rundir>
GetConf()
{
    # global Conf EnvPfx CmdEnv
    local cnf key sfx path link tags

    # Full-line # comments are allowed, \n changed to ;
    if cnf=`sed -e '/^[ 	]*#/d' -e 's/\\\\n/; /g' $1 | jq -c -e ".$2"`; then
	ParseConf "$cnf"
	# Check for required paths
	for key in 'path' 'sleep' 'filenames.hl7.pattern' 'actions.copy.cmd' \
		   'returns.done.cmd' 'returns.fail.cmd'
	do
	    test -v Conf[$key] || LogErr "cannot find \"$key\" in $1" 2
	done
	# Make sure that ${Conf['path']} exists
	test -d "${Conf['path']}" || LogErr "directory '${Conf['path']}' does not exist" 3
	# Build environment
	EnvPfx="${Conf['env_prefix']:-INDIRD_}"
	for sfx in ${Conf['env._keys']}	# May not exist
	do
	    key="env.$sfx"
	    CmdEnv="$CmdEnv$EnvPfx$sfx=\"${Conf[$key]}\" "
	done
	CmdEnv="$CmdEnv${EnvPfx}PATH=\"${Conf['path']}\" "
	# Make sure our .path has its dir
	mkdir -p $3
	path="$3/${2}_path"
	if [ -e "$path" -o -L "$path" ]; then
	    link=`readlink "$path"`
	    #echo "path='$path' link='$link' conf='${Conf['path']}'"
	    if [ "$link" != "${Conf['path']}" ]; then
		LogMsg "Removing previous '$path' link to '$link'"
		rm -f "$path"
	    fi
	fi
	test -e "$path" || ln -s "${Conf['path']}" "$path"
    else
	# if not found, list available tags
	tags=`sed '/^[ 	]*#/d' $1 | jq -r 'keys|join(" ")'`
	LogErr "\"$2\" tag not found in $1. Available tags: $tags" 2
    fi
}

#
#   Recursively parse JSON config data into Conf bash array
#
# params <JSON-obj> [ <obj-path> ]
ParseConf()
{
    # global Conf
    local JSON Path Key Val

    JSON=`jq -r 'to_entries|.[]|(.key|tostring)+" "+(.value|tostring)' <<< "$1"`
    test "$2" && Path="$2."

    while read -r Key Val
    do
        if jq -e '.|iterables' >/dev/null 2>&1 <<< "$Val"; then
	    test "$Path$Key" = 'macros' && continue	# Skip this yaml kludge
            Conf["$Path$Key._keys"]=`jq -r 'keys|map(tostring)|join(" ")' <<< "$Val"`
            ParseConf "$Val" "$Path$Key"
        else
            Conf["$Path$Key"]="$Val"
        fi
    done <<< "$JSON"
}

#
#   Wakeup main process by killing its sleep command (if running)
#
# params <instance>
WakeupMain()
{
    local MainPID pid

    eval `systemctl -p MainPID show $1`
    if [ 0$MainPID -gt 0 ]; then
	pid=`ps -ef | awk "\\$3==$MainPID && \\$8==\"sleep\"{print \\$2}"`
	if [ "$pid" ]; then
	    LogMsg "Waking up $1 (Main PID=$MainPID, sleep PID=$pid)"
	    kill $pid
	else
	    LogMsg "No need to wakeup $1 (Main PID=$MainPID), already active"
	fi
    else
	LogMsg "Instance $1 is not running ?"
    fi
}

#
#   Output all JSON paths declared in the config file
#   (NOTE that these 'paths' are conceptually unrelated to ${Conf['path']})
#   
ConfigPaths()
{
    # global Conf
    local key

    for key in "${!Conf[@]}"
    do
	echo "${key}=\"${Conf[$key]}\""
    done | sort
}

SigUsr1()
{
    # global Config Conf Tag RunDir Prg
    LogMsg "Reloading $Config on SIGUSR1"

    # We need to delete the old Conf, but we cannot use unset
    # as we would then need to do a declare -A Conf, which
    # cannot work here as it needs to be global.
    # So instead we delete all keys in Conf
    for key in "${!Conf[@]}"
    do
	unset Conf[$key]
    done
    # Then re-read the config
    GetConf $Config $Tag $RunDir/$Prg
}

SigTerm()
{
    LogMsg "Exiting on SIGTERM"
    exit 0
}

#
#------ Startup --------------------------------------------------------
#
#   We need a tag as our first argument
#   so we can load and check our config
#
test "$1" || Usage
Tag="$1"
declare -A Conf
GetConf $Config $Tag "$RunDir/$Prg"	# Check that tag exists and load config
#echo "CmdEnv=\"$CmdEnv\""; exit 0
#
#   Handle wakeup calls from our associated .path, and paths utility
#
if [ "$2" = 'wakeup' ]; then
    WakeupMain "$Prg@$Tag"
    exit 0
elif [ "$2" = 'config' ]; then
    tty >/dev/null && ConfigPaths || LogErr "'config' subcommand is for command-line mode only" 2
    exit 0
fi
test "$2" && Usage	# Reject 2nd arg != 'wakeup' && != 'config'
#
#   Trap signals and notify systemd we are done with our init
#
trap SigTerm TERM
trap SigUsr1 USR1
LogMsg "Starting $Prg on ${Conf['path']} ================"
LogMsg "Default watch interval is ${Conf['sleep']}s"
cd "${Conf['path']}"
systemd-notify --ready

#
#------ Main loop ------------------------------------------------------
#
LastMod=0
while :
do
    # wakeup on signal or wakeup from sleep and store last touch time of spool dir on first wakeup
    # if dir untouched since last wakeup or if spool dir locked return
    # protected by lock
    #   while dir touched since last loop
    #	loop on rules of conf
    #	  loop on files of rules
    #	    loop on actions of rules using timeout or retry option
    #	      loop on on_return of action choosing fronm OK or KO
    #	    loop on log_to of rules
    #
    Mod=`stat -c '%Y' "${Conf['path']}"`
    while [ $Mod -gt $LastMod ]
    do
	Nb=0
	LastMod=$Mod
	LogMsg "Examining ${Conf['path']}..."
	for f in ${Conf['filenames.hl7.pattern']}
	do
	    test -f "$f" || continue
	    LogMsg "Processing ${Conf['path']}/$f"
	    ThisEnv="$CmdEnv${EnvPfx}FILE=\"$f\""
	    if sh -c "$ThisEnv; ${Conf['actions.copy.cmd']}"; then
		sh -c "$ThisEnv; ${Conf['returns.done.cmd']}"
	    else
		sh -c "$ThisEnv; ${Conf['returns.fail.cmd']}"
	    fi
	    Nb=$((Nb + 1))
	done
	LogMsg "Processed $Nb file(s)"
	test $Nb -eq 0 && break		# No file found, abort inner loop
	Mod=`stat -c '%Y' "${Conf['path']}"`
    done
    LogMsg "Sleeping ${Conf['sleep']}s"
    sleep ${Conf['sleep']} &
    wait $!	# Trick to avoid stderr messages like Terminated
done
